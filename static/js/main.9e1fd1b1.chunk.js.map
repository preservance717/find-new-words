{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["STANDARD_WORDS","App","useState","articles","setArticles","newWords","setNewWords","className","type","accept","onChange","file","files","target","fileReader","FileReader","onload","event","result","workbook","XLSX","read","data","sheet","Sheets","hasOwnProperty","concat","utils","sheet_to_json","map","element","e","console","log","readAsBinaryString","rows","onInput","value","onClick","articleArr","split","filter","newWordsCopy","Date","forEach","item","trim","toLowerCase","some","word","push","length","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSAKIA,EAAiB,GAqENC,EAnEH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACTC,EADS,KACCC,EADD,OAEgBF,mBAAS,IAFzB,mBAETG,EAFS,KAECC,EAFD,KAIhB,OACE,sBAAKC,UAAU,UAAf,UACE,sBAAKA,UAAU,kBAAf,UACE,mFACA,uBAAOC,KAAK,OAAOC,OAAO,cAAcC,SAAW,SAAAC,GAAS,IAClDC,EAAUD,EAAKE,OAAfD,MACFE,EAAa,IAAIC,WACvBD,EAAWE,OAAS,SAAAC,GAClB,IAAI,IACMC,EAAWD,EAAMJ,OAAjBK,OACFC,EAAWC,IAAKC,KAAKH,EAAQ,CAACV,KAAM,WACtCc,EAAO,GACX,IAAI,IAAMC,KAASJ,EAASK,OAC1B,GAAGL,EAASK,OAAOC,eAAeF,GAAQ,CACxCD,EAAOA,EAAKI,OAAON,IAAKO,MAAMC,cAAcT,EAASK,OAAOD,KAC5D,MAGJvB,EAAiBsB,EAAKO,KAAI,SAAAC,GAAO,OAAIA,EAAO,QAE5C,MAAMC,GACNC,QAAQC,IAAI,gDAGhBnB,EAAWoB,mBAAmBtB,EAAM,UAGxC,0BACEL,UAAU,mBACV4B,KAAM,GACNC,QAAS,SAAAnB,GACPb,EAAYa,EAAMJ,OAAOwB,UAG7B,wBAAQC,QAAS,WACf,IAAMC,EAAapC,EAASqC,MAAM,+BAAqBC,QAAO,SAAAX,GAAO,MAAgB,KAAZA,KACnEY,EAAe,GACrBV,QAAQC,IAAI,SAAU,IAAIU,MAC1BJ,EAAWK,SAAQ,SAAAd,GACjB,IAAMe,EAAOf,EAAQgB,OAAOC,cACzB/C,EAAegD,MAAK,SAAAC,GAAI,OAAIA,EAAKH,OAAOC,gBAAkBF,MAC3DH,EAAaQ,KAAKL,MAGtBvC,EAAYiC,EAAWE,QAAO,SAAAX,GAC5B,IAAMe,EAAOf,EAAQgB,OAAOC,cAC5B,OAAQL,EAAaM,MAAK,SAAAC,GAAI,OAAIA,EAAKF,gBAAkBF,SAE3Db,QAAQC,IAAI,QAAS,IAAIU,OAd3B,0BAiBA,qBAAIpC,UAAU,qBAAd,wDACWF,EAAS8C,OADpB,UAEG9C,EAASwB,KAAI,SAACC,EAASsB,GACtB,OACE,6BAAgCtB,GAAhC,UAAYA,GAAZ,OAAsBsB,cCtDnBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.9e1fd1b1.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport XLSX from 'xlsx';\n\nimport './App.css';\n\nlet STANDARD_WORDS = []\n\nconst App = () => {\n  const [articles, setArticles] = useState(\"\");\n  const [newWords, setNewWords] = useState([]);\n\n  return (\n    <div className=\"content\">\n      <div className=\"content__upload\">\n        <span>上传词汇EXCEL文件：</span>\n        <input type=\"file\" accept=\".xlsx, .xls\" onChange={ file => {\n          const { files } = file.target;\n          const fileReader = new FileReader();\n          fileReader.onload = event => {\n            try{\n              const { result } = event.target;\n              const workbook = XLSX.read(result, {type: \"binary\"});\n              let data = [];\n              for(const sheet in workbook.Sheets) {\n                if(workbook.Sheets.hasOwnProperty(sheet)) {\n                  data = data.concat(XLSX.utils.sheet_to_json(workbook.Sheets[sheet]));\n                  break;\n                }\n              }\n              STANDARD_WORDS = data.map(element => element[\"word\"]);\n              // console.log(\"excel数据\", STANDARD_WORDS);\n            } catch(e) {\n              console.log(\"文件类型不正确\")\n            }\n          }\n          fileReader.readAsBinaryString(files[0]);\n        }}/>\n      </div>\n      <textarea \n        className=\"content__article\"\n        rows={20}\n        onInput={event => {\n          setArticles(event.target.value)\n        }}\n      />\n      <button onClick={() => {\n        const articleArr = articles.split(/[!\\?',;:\"“”\\.' ]+/).filter(element => element !== \"\");\n        const newWordsCopy = [];\n        console.log(\"before\", new Date());\n        articleArr.forEach(element => {\n          const item = element.trim().toLowerCase();\n          if(STANDARD_WORDS.some(word => word.trim().toLowerCase() === item)) {\n            newWordsCopy.push(item)\n          }\n        }) \n        setNewWords(articleArr.filter(element => {\n          const item = element.trim().toLowerCase();\n          return !newWordsCopy.some(word => word.toLowerCase() === item);\n        }));\n        console.log(\"after\", new Date());\n\n      }}>查询</button>\n      <ol className=\"content__new-words\">\n        超纲词汇(个数：{newWords.length})：\n        {newWords.map((element, index) => {\n          return (\n            <li key={`${element}${index}`}>{element}</li>\n          )\n        })}\n      </ol>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}